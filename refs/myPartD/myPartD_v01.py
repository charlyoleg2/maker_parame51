# freecad-python generated by Parametrix
# run the script with:
# freecad.cmd myScript.py

import FreeCAD as App
import Part

#print(sys.argv)
outFileName = "myPartD"
if (len(sys.argv) == 3):
    outFileName = sys.argv[2]
print(f"outFileName: {outFileName}")

def ctr_face_myPartD_faceTube1_Fa0_Ctr0():
	# Radius, XYZ-position, orientation
	aCircle = Part.makeCircle(30.0000, App.Vector(0.0000, 30.0000, 0), App.Vector(0, 0, 1))
	aWire = Part.Wire(aCircle)
	rFace = Part.Face(aWire)
	return rFace

def ctr_face_myPartD_faceTube1_Fa0_Ctr1():
	# Radius, XYZ-position, orientation
	aCircle = Part.makeCircle(20.0000, App.Vector(0.0000, 30.0000, 0), App.Vector(0, 0, 1))
	aWire = Part.Wire(aCircle)
	rFace = Part.Face(aWire)
	return rFace

def face_myPartD_faceTube1_Fa0():
	FC000 = ctr_face_myPartD_faceTube1_Fa0_Ctr0()
	FC001 = ctr_face_myPartD_faceTube1_Fa0_Ctr1()
	rOneFace = FC000.cut([FC001])
	rOneFace.check()
	return rOneFace

def myPartD_faceTube1():
	FA000 = face_myPartD_faceTube1_Fa0()
	rOneFig = FA000
	rOneFig.check()
	return rOneFig

def ctr_face_myPartD_faceTube2_Fa0_Ctr0():
	# Radius, XYZ-position, orientation
	aCircle = Part.makeCircle(50.0000, App.Vector(0.0000, 0.0000, 0), App.Vector(0, 0, 1))
	aWire = Part.Wire(aCircle)
	rFace = Part.Face(aWire)
	return rFace

def ctr_face_myPartD_faceTube2_Fa0_Ctr1():
	# Radius, XYZ-position, orientation
	aCircle = Part.makeCircle(40.0000, App.Vector(0.0000, 0.0000, 0), App.Vector(0, 0, 1))
	aWire = Part.Wire(aCircle)
	rFace = Part.Face(aWire)
	return rFace

def face_myPartD_faceTube2_Fa0():
	FC000 = ctr_face_myPartD_faceTube2_Fa0_Ctr0()
	FC001 = ctr_face_myPartD_faceTube2_Fa0_Ctr1()
	rOneFace = FC000.cut([FC001])
	rOneFace.check()
	return rOneFace

def myPartD_faceTube2():
	FA000 = face_myPartD_faceTube2_Fa0()
	rOneFig = FA000
	rOneFig.check()
	return rOneFig

def ctr_face_myPartD_faceTube1H_Fa0_Ctr0():
	# Radius, XYZ-position, orientation
	aCircle = Part.makeCircle(20.0000, App.Vector(0.0000, 30.0000, 0), App.Vector(0, 0, 1))
	aWire = Part.Wire(aCircle)
	rFace = Part.Face(aWire)
	return rFace

def face_myPartD_faceTube1H_Fa0():
	FC000 = ctr_face_myPartD_faceTube1H_Fa0_Ctr0()
	rOneFace = FC000
	rOneFace.check()
	return rOneFace

def myPartD_faceTube1H():
	FA000 = face_myPartD_faceTube1H_Fa0()
	rOneFig = FA000
	rOneFig.check()
	return rOneFig

def ctr_face_myPartD_faceTube2H_Fa0_Ctr0():
	# Radius, XYZ-position, orientation
	aCircle = Part.makeCircle(40.0000, App.Vector(0.0000, 0.0000, 0), App.Vector(0, 0, 1))
	aWire = Part.Wire(aCircle)
	rFace = Part.Face(aWire)
	return rFace

def face_myPartD_faceTube2H_Fa0():
	FC000 = ctr_face_myPartD_faceTube2H_Fa0_Ctr0()
	rOneFace = FC000
	rOneFace.check()
	return rOneFace

def myPartD_faceTube2H():
	FA000 = face_myPartD_faceTube2H_Fa0()
	rOneFig = FA000
	rOneFig.check()
	return rOneFig

def myPartD_faceTop():
	rOneFig = undefined
	rOneFig.check()
	return rOneFig

def fex_subpax_myPartD_tube1():
	FIG = myPartD_faceTube1()
	VEX = FIG.extrude(App.Vector(0, 0, 160))
	VR1 = VEX.rotate(App.Vector(0, 0, 0), App.Vector(1, 0, 0), -90.0000)
	VR2 = VR1.rotate(App.Vector(0, 0, 0), App.Vector(0, 1, 0), 0.0000)
	VR3 = VR2.rotate(App.Vector(0, 0, 0), App.Vector(0, 0, 1), 0.0000)
	VFP = VR3.translate(App.Vector(0.0000, -80.0000, 60.0000))
	return VFP
subpax_myPartD_tube1 = fex_subpax_myPartD_tube1()

def fex_subpax_myPartD_tube1H():
	FIG = myPartD_faceTube1H()
	VEX = FIG.extrude(App.Vector(0, 0, 160))
	VR1 = VEX.rotate(App.Vector(0, 0, 0), App.Vector(1, 0, 0), -90.0000)
	VR2 = VR1.rotate(App.Vector(0, 0, 0), App.Vector(0, 1, 0), 0.0000)
	VR3 = VR2.rotate(App.Vector(0, 0, 0), App.Vector(0, 0, 1), 0.0000)
	VFP = VR3.translate(App.Vector(0.0000, -80.0000, 60.0000))
	return VFP
subpax_myPartD_tube1H = fex_subpax_myPartD_tube1H()

def fex_subpax_myPartD_tube2():
	FIG = myPartD_faceTube2()
	VEX = FIG.extrude(App.Vector(0, 0, 160))
	VR1 = VEX.rotate(App.Vector(0, 0, 0), App.Vector(1, 0, 0), 0.0000)
	VR2 = VR1.rotate(App.Vector(0, 0, 0), App.Vector(0, 1, 0), 90.0000)
	VR3 = VR2.rotate(App.Vector(0, 0, 0), App.Vector(0, 0, 1), 0.0000)
	VFP = VR3.translate(App.Vector(-80.0000, 0.0000, 0.0000))
	return VFP
subpax_myPartD_tube2 = fex_subpax_myPartD_tube2()

def fex_subpax_myPartD_tube2H():
	FIG = myPartD_faceTube2H()
	VEX = FIG.extrude(App.Vector(0, 0, 160))
	VR1 = VEX.rotate(App.Vector(0, 0, 0), App.Vector(1, 0, 0), 0.0000)
	VR2 = VR1.rotate(App.Vector(0, 0, 0), App.Vector(0, 1, 0), 90.0000)
	VR3 = VR2.rotate(App.Vector(0, 0, 0), App.Vector(0, 0, 1), 0.0000)
	VFP = VR3.translate(App.Vector(-80.0000, 0.0000, 0.0000))
	return VFP
subpax_myPartD_tube2H = fex_subpax_myPartD_tube2H()

def fvol_ipax_myPartD_addi():
	V000 = subpax_myPartD_tube1
	V001 = V000.fuse(subpax_myPartD_tube2)
	VFC = V001.removeSplitter()
	return VFC
ipax_myPartD_addi = fvol_ipax_myPartD_addi()

def fvol_ipax_myPartD_subs():
	V000 = subpax_myPartD_tube1H
	V001 = V000.fuse(subpax_myPartD_tube2H)
	VFC = V001.removeSplitter()
	return VFC
ipax_myPartD_subs = fvol_ipax_myPartD_subs()

def fvol_pax_myPartD():
	V000 = ipax_myPartD_addi
	V001 = V000.cut(ipax_myPartD_subs)
	VFC = V001.removeSplitter()
	return VFC
pax_myPartD = fvol_pax_myPartD()


pax_myPartD.check()
#pax_myPartD.exportBrep(f"{outFileName}.brep")
#pax_myPartD.exportIges(f"{outFileName}.igs")
#pax_myPartD.exportStep(f"{outFileName}.stp")
pax_myPartD.exportStl(f"{outFileName}.stl")

